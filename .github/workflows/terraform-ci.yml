name: Terraform CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  TERRAFORM_VERSION: '1.13.3'
  TFLINT_VERSION: 'v0.59.1'
  AWS_REGION: 'ap-southeast-4'

permissions:
  contents: write
  security-events: write
  actions: read
  pull-requests: write

jobs:
  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: [
          'terraform/modules/shared-networking',
          'terraform/modules/web-application',
          'terraform/modules/security-baseline',
          'terraform/modules/database-backup',
          'terraform/modules/sns-notifications',
          'terraform/modules/react-hosting'
        ]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend=false
        working-directory: ${{ matrix.directory }}

      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ${{ matrix.directory }}

      - name: Comment PR (Format)
        if: github.event_name == 'pull_request' && steps.fmt.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Format 📖\`${{ steps.fmt.outcome }}\`

            <details><summary>Show Format Results</summary>

            \`\`\`
            ${{ steps.fmt.outputs.stdout }}
            \`\`\`

            </details>

            Run \`terraform fmt -recursive\` to fix formatting issues.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  terraform-lint:
    name: Terraform Linting
    runs-on: ubuntu-latest
    needs: terraform-validate

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Cache TFLint Plugin Dir
        uses: actions/cache@v4
        with:
          path: ~/.tflint.d/plugins
          key: ${{ runner.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}

      - name: Show TFLint Version
        run: tflint --version

      - name: Init TFLint
        run: tflint --init
        continue-on-error: true

      - name: Run TFLint
        run: tflint -f compact --recursive || true

  terraform-security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: terraform-lint

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Checkov Security Scan
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform
          output_format: sarif
          output_file_path: reports/results.sarif
          download_external_modules: true
          quiet: true

      - name: Upload Checkov Results to GitHub Advanced Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: reports/results.sarif

      - name: Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy Results to GitHub Advanced Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-security
    if: github.event_name == 'pull_request'
    env:
      TF_VAR_project_name: "epic-ci-test"
      TF_VAR_environment: "staging"

    strategy:
      matrix:
        environment: ['staging']

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init
        working-directory: terraform/environments/${{ matrix.environment }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan
        working-directory: terraform/environments/${{ matrix.environment }}
        continue-on-error: true

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('terraform/environments/${{ matrix.environment }}/tfplan.txt', 'utf8');
            const output = `#### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan for ${{ matrix.environment }}</summary>

            \`\`\`terraform
            ${plan}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  terraform-cost-estimation:
    name: Cost Estimation
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Infracost
        uses: infracost/infracost-action/setup@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Generate Infracost JSON
        run: |
          infracost breakdown --path=terraform/environments/staging \
            --format=json \
            --out-file=infracost-base.json

      - name: Post Infracost Comment
        run: |
          infracost comment github --path=infracost-base.json \
            --repo=$GITHUB_REPOSITORY \
            --github-token=${{ github.token }} \
            --pull-request=${{ github.event.pull_request.number }} \
            --behavior=update

  terraform-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}

      - name: Render Terraform Docs
        uses: terraform-docs/gh-actions@v1.2.0
        with:
          working-dir: .
          output-file: TERRAFORM.md
          output-method: inject
          git-push: "true"
          git-commit-message: "docs: update terraform documentation"

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: terraform-security
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Run Terratest Integration Tests
        run: |
          cd tests
          go mod download
          go test -v -timeout 30m

  terraform-apply-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [terraform-plan, terraform-security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init
        working-directory: terraform/environments/staging

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: terraform/environments/staging

  terraform-apply-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [terraform-apply-staging, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init
        working-directory: terraform/environments/production

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: terraform/environments/production

      - name: Terraform Apply
        run: terraform apply tfplan
        working-directory: terraform/environments/production

      - name: Notify Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "✅ Production deployment completed successfully!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "❌ Production deployment failed!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}